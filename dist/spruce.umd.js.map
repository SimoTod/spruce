{"version":3,"file":"spruce.umd.js","sources":["../src/utils.js","../src/observable.js","../src/index.js","../src/bus.js"],"sourcesContent":["export const domReady = () => {\n    return new Promise(resolve => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", resolve)\n        } else {\n            resolve()\n        }\n    })\n}\n\nexport const buildInitExpression = el => {\n    let expression = \"$store = Spruce.subscribe($el)\"\n\n    if (el.hasAttribute('x-init')) {\n        expression = `${expression}; ${el.getAttribute('x-init')}`\n    }\n\n    return expression\n}\n\nexport const isNullOrUndefined = value => {\n    return value === null || value === undefined\n}","import { isNullOrUndefined } from './utils'\n\nexport const createObservable = (target, callbacks) => {\n    Object.keys(target).forEach(key => {\n        if (! isNullOrUndefined(target[key]) && Object.getPrototypeOf(target[key]) === Object.prototype) {\n            target[key] = createObservable(target[key], callbacks)\n        }\n    })\n\n    return new Proxy(target, {\n        get(target, key) {\n            if (callbacks.hasOwnProperty('get')) {\n                callbacks.get(key)\n            }\n            \n            return target[key]\n        },\n        set(target, key, value) {\n            if (! isNullOrUndefined(value) && typeof value === 'object') {\n                value = createObservable(value, callbacks)\n            }\n\n            callbacks.set(key, target[key] = value)\n\n            return true\n        }\n    })\n}","import { domReady, buildInitExpression } from './utils'\nimport { createObservable } from './observable'\nimport EventBus from './bus'\n\nconst Spruce = {\n    options: {\n        globalStoreVariable: false,\n    },\n\n    events: EventBus,\n\n    stores: {},\n\n    subscribers: [],\n\n    start: async function () {\n        await domReady()\n\n        document.querySelectorAll('[x-subscribe]').forEach(el => {\n            el.setAttribute('x-init', buildInitExpression(el))\n            el.removeAttribute('x-subscribe')\n        })\n\n        this.stores = createObservable(this.stores, {\n            set: (key, value) => {\n                this.updateSubscribers(key, value)\n            }\n        })\n\n        if (this.options.globalStoreVariable) {\n            document.querySelectorAll('[x-data]').forEach(el => {\n                if (! this.subscribers.includes(el)) {\n                    this.subscribers.push(el)\n                }\n            })\n            \n            window.$store = this.stores\n        }\n    },\n\n    store: function (name, state = {}) {\n        if (! this.stores[name]) {\n            this.stores[name] = state\n        }\n    },\n\n    subscribe(el) {\n        this.subscribers.push(el)\n\n        return this.stores\n    },\n\n    updateSubscribers(key, value) {\n        this.subscribers.forEach(el => {\n            if (el.__x !== undefined) {\n                el.__x.$data.spruce = value\n            }\n        })\n    },\n\n    config(options = {}) {\n        this.options = Object.assign(this.options, options)\n    },\n\n    on(name, callback) {\n        this.events.on(name, callback)\n    },\n}\n\nconst deferrer = window.deferLoadingAlpine || function (callback) { callback() }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.Spruce = Spruce\n    window.Spruce.start()\n\n    deferrer(callback)\n}\n\nexport default Spruce","export default {\n    events: {},\n\n    on(name, callback) {\n        if (! this.events.hasOwnProperty(name)) {\n            this.events[name] = []\n        }\n\n        this.events[name].push(callback)\n    },\n\n    emit(name, data = {}) {\n        if (this.events.hasOwnProperty(name)) {\n            this.events[name].forEach(callback => {\n                callback(data)\n            })\n        }\n    }\n}"],"names":["const","isNullOrUndefined","value","createObservable","target","callbacks","Object","keys","forEach","key","getPrototypeOf","prototype","Proxy","get","hasOwnProperty","set","Spruce","options","globalStoreVariable","events","on","name","callback","this","push","emit","data","stores","subscribers","start","Promise","resolve","document","readyState","addEventListener","querySelectorAll","el","setAttribute","expression","hasAttribute","getAttribute","buildInitExpression","removeAttribute","_this","updateSubscribers","includes","window","$store","store","state","subscribe","undefined","__x","$data","spruce","config","assign","deferrer","deferLoadingAlpine"],"mappings":"qKAAOA,IAoBMC,WAAoBC,UACtBA,MAAAA,GCnBEC,WAAoBC,EAAQC,UACrCC,OAAOC,KAAKH,GAAQI,iBAAQC,GAClBR,EAAkBG,EAAOK,KAASH,OAAOI,eAAeN,EAAOK,MAAUH,OAAOK,YAClFP,EAAOK,GAAON,EAAiBC,EAAOK,GAAMJ,MAI7C,IAAIO,MAAMR,EAAQ,CACrBS,aAAIT,EAAQK,UACJJ,EAAUS,eAAe,QACzBT,EAAUQ,IAAIJ,GAGXL,EAAOK,IAElBM,aAAIX,EAAQK,EAAKP,UACPD,EAAkBC,IAA2B,iBAAVA,IACrCA,EAAQC,EAAiBD,EAAOG,IAGpCA,EAAUU,IAAIN,EAAKL,EAAOK,GAAOP,IAE1B,MCpBbc,EAAS,CACXC,QAAS,CACLC,qBAAqB,GAGzBC,OCTW,CACXA,OAAQ,GAERC,YAAGC,EAAMC,GACCC,KAAKJ,OAAOL,eAAeO,UACxBF,OAAOE,GAAQ,SAGnBF,OAAOE,GAAMG,KAAKF,IAG3BG,cAAKJ,EAAMK,kBAAO,IACVH,KAAKJ,OAAOL,eAAeO,SACtBF,OAAOE,GAAMb,iBAAQc,GACtBA,EAASI,ODHrBC,OAAQ,GAERC,YAAa,GAEbC,2BAQIN,4BFtBG,IAAIO,iBAAQC,GACY,WAAvBC,SAASC,WACTD,SAASE,iBAAiB,mBAAoBH,GAE9CA,uBEaJC,SAASG,iBAAiB,iBAAiB3B,iBAAQ4B,GAC/CA,EAAGC,aAAa,kBFTOD,OAC3BE,EAAa,wCAEbF,EAAGG,aAAa,YAChBD,EAAgBA,OAAeF,EAAGI,aAAa,WAG5CF,EEE2BG,CAAoBL,IAC9CA,EAAGM,gBAAgB,mBAGlBf,OAASxB,EAAiBwC,EAAKhB,OAAQ,CACxCZ,aAAMN,EAAKP,KACF0C,kBAAkBnC,EAAKP,MAIhCyC,EAAK1B,QAAQC,sBACbc,SAASG,iBAAiB,YAAY3B,iBAAQ4B,GACpCO,EAAKf,YAAYiB,SAAST,MACvBR,YAAYJ,KAAKY,KAI9BU,OAAOC,OAASJ,EAAKhB,8CAI7BqB,MAAO,SAAU3B,EAAM4B,kBAAQ,IACrB1B,KAAKI,OAAON,UACTM,OAAON,GAAQ4B,IAI5BC,mBAAUd,eACDR,YAAYJ,KAAKY,GAEfb,KAAKI,QAGhBiB,2BAAkBnC,EAAKP,QACd0B,YAAYpB,iBAAQ4B,QACNe,IAAXf,EAAGgB,MACHhB,EAAGgB,IAAIC,MAAMC,OAASpD,MAKlCqD,gBAAOtC,kBAAU,SACRA,QAAUX,OAAOkD,OAAOjC,KAAKN,QAASA,IAG/CG,YAAGC,EAAMC,QACAH,OAAOC,GAAGC,EAAMC,KAIvBmC,EAAWX,OAAOY,oBAAsB,SAAUpC,GAAYA,YAEpEwB,OAAOY,mBAAqB,SAAUpC,GAClCwB,OAAO9B,OAASA,EAChB8B,OAAO9B,OAAOa,QAEd4B,EAASnC"}