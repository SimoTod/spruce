{"version":3,"file":"spruce.js","sources":["../src/utils.js","../src/index.js","../src/observable.js"],"sourcesContent":["export const domReady = () => {\n    return new Promise(resolve => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", resolve)\n        } else {\n            resolve()\n        }\n    })\n}\n\nexport const buildInitExpression = el => {\n    let expression = \"$store = Spruce.subscribe($el)\"\n\n    if (el.hasAttribute('x-init')) {\n        expression = `${expression}; ${el.getAttribute('x-init')}`\n    }\n\n    return expression\n}","import { domReady, buildInitExpression } from './utils'\nimport { createObservable } from './observable'\n\nconst Spruce = {\n    stores: {},\n\n    subscribers: [],\n\n    start: async function () {\n        await domReady()\n\n        document.querySelectorAll('[x-subscribe]').forEach(el => {\n            el.setAttribute('x-init', buildInitExpression(el))\n            el.removeAttribute('x-subscribe')\n        })\n\n        this.stores = createObservable(this.stores, (key, value) => {\n            this.updateSubscribers(key, value)\n        })\n    },\n\n    store: function (name, state = {}) {\n        if (! this.stores[name]) {\n            this.stores[name] = state\n        }\n    },\n\n    subscribe(el) {\n        this.subscribers.push(el)\n\n        return this.stores\n    },\n\n    updateSubscribers(key, value) {\n        this.subscribers.forEach(el => {\n            if (el.__x !== undefined) {\n                el.__x.$data.spruce = [key, value]\n            }\n        })\n    }\n}\n\nconst deferrer = window.deferLoadingAlpine || function (callback) { callback() }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.Spruce = Spruce\n    window.Spruce.start()\n\n    deferrer(callback)\n}\n\nexport default Spruce","export const createObservable = (target, callback) => {\n    Object.keys(target).forEach(key => {\n        if (Object.getPrototypeOf(target[key]) === Object.prototype) {\n            target[key] = create(target[key], callback)\n        }\n    })\n\n    return new Proxy(target, {\n        set(target, key, value) {\n            if (typeof value === 'object') {\n                value = create(value, callback)\n            }\n\n            callback(key, target[key] = value)\n\n            return true\n        }\n    })\n}"],"names":["const","Spruce","stores","subscribers","start","this","Promise","resolve","document","readyState","addEventListener","target","callback","querySelectorAll","forEach","el","setAttribute","expression","hasAttribute","getAttribute","buildInitExpression","removeAttribute","_this","key","value","updateSubscribers","Object","keys","getPrototypeOf","prototype","create","Proxy","set","store","name","state","subscribe","push","undefined","__x","$data","spruce","deferrer","window","deferLoadingAlpine"],"mappings":"AAAOA,ICGDC,EAAS,CACXC,OAAQ,GAERC,YAAa,GAEbC,2BAQIC,4BDfG,IAAIC,iBAAQC,GACY,WAAvBC,SAASC,WACTD,SAASE,iBAAiB,mBAAoBH,GAE9CA,2BELqBI,EAAQC,EDWjCJ,SAASK,iBAAiB,iBAAiBC,iBAAQC,GAC/CA,EAAGC,aAAa,kBDFOD,OAC3BE,EAAa,wCAEbF,EAAGG,aAAa,YAChBD,EAAgBA,OAAeF,EAAGI,aAAa,WAG5CF,ECL2BG,CAAoBL,IAC9CA,EAAGM,gBAAgB,mBAGlBnB,QChBoBS,EDgBMW,EAAKpB,OChBHU,WDgBYW,EAAKC,KACzCC,kBAAkBF,EAAKC,IChBpCE,OAAOC,KAAKhB,GAAQG,iBAAQS,GACpBG,OAAOE,eAAejB,EAAOY,MAAUG,OAAOG,YAC9ClB,EAAOY,GAAOO,OAAOnB,EAAOY,GAAMX,MAInC,IAAImB,MAAMpB,EAAQ,CACrBqB,aAAIrB,EAAQY,EAAKC,SACQ,iBAAVA,IACPA,EAAQM,OAAON,EAAOZ,IAG1BA,EAASW,EAAKZ,EAAOY,GAAOC,IAErB,4CDMfS,MAAO,SAAUC,EAAMC,kBAAQ,IACrB9B,KAAKH,OAAOgC,UACThC,OAAOgC,GAAQC,IAI5BC,mBAAUrB,eACDZ,YAAYkC,KAAKtB,GAEfV,KAAKH,QAGhBuB,2BAAkBF,EAAKC,QACdrB,YAAYW,iBAAQC,QACNuB,IAAXvB,EAAGwB,MACHxB,EAAGwB,IAAIC,MAAMC,OAAS,CAAClB,EAAKC,QAMtCkB,EAAWC,OAAOC,oBAAsB,SAAUhC,GAAYA,KAEpE+B,OAAOC,mBAAqB,SAAUhC,GAClC+B,OAAO1C,OAASA,EAChB0C,OAAO1C,OAAOG,QAEdsC,EAAS9B"}